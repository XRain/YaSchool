{
  "name": "ams",
  "description": "ams - asset management system - plugin enabled build tool with jquery like API",
  "version": "0.0.21",
  "author": {
    "name": "Oleg Slobodskoi",
    "email": "oleg008@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kof/node-ams.git"
  },
  "keywords": [
    "build",
    "tool",
    "static server",
    "minify",
    "minifier",
    "compressor",
    "processor",
    "base64",
    "cssmin",
    "uglifyjs",
    "vendor css",
    "amd",
    "transport",
    "dependencies manager"
  ],
  "engines": {
    "node": "0.6.x"
  },
  "bin": {},
  "dependencies": {
    "natives": ">= 0.0.5",
    "sharedjs": ">= 0.0.2",
    "uglify-js": "1.2.x"
  },
  "devDependencies": {
    "qunit": ">= 0.1.5"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "## About\nams - asset management system for nodejs. The goal is to have a flexible and powerful system for dependency management and preprocessing of static files.\n\n## What is ams?\n\n- very flexible build tool\n- dependency detector to combine files (using @import for css and require('module') for javascript)\n- easy extendable preprocessing framework\n- enables you to write your js code for the client in the same way as the nodejs server (commonjs modules)\n\n## Features\n- Expressive API\n- Find your files\n  - static dependencies detection (looks for commonjs 'require' calls)\n  - finder using regexp\n- process\n  - minify js (using uglifyjs)\n  - minify css (using cssmin from yahoo)\n  - wrap js with commonjs module definition string (requirejs compatible) for transport\n  - add vendor css prefixes (-o, -ms, -moz, -webkit)\n  - inline small images in css using base64 data encoding\n  - combine css files using @import declaration\n  - add host to background image paths and external css (@import), to load it from cdn\n  - add your own preprocessor ...\n- combine\n- write to disk\n\n## Installation\n\n\tnpm install ams\n\n## API\n\n### require ams\n\n\tvar ams = require('ams');\n\n### ams.build.create(root)\nCreate a build instance from passed root path. Returns build Instance.\nInstance properties are:\n\n- `this.root` - passed path to the src dir.\n- `this.options` - current options object, contains all options for all methods.\n- `this.paths` - like require.paths.\n- `this.data` - key/value hash of path/contents\n\nExample:\n\n\tvar build = ams.build.create('/path/to/src');\n\n### Build#find(options)\nFind files to be added to the build instance. Returns build Instance.\n\nDefaults are:\n\n\t{\n        detect: null, // path to the file, where static 'require' dependencies tracking should start from,\n        pattern: /\\.[\\w]+$/, // regexp to match files, is used if detect is not defined\n        filter: null, // regexp to filter files, is used if detect is not defined\n        rec: true, // recursive search, is used if detect is not defined\n        paths: null // like require.paths to resolve deps\n    }\n\nExample:\n\n\tbuild.find();\n\n### Build#add(path, [targetDir]);\nAdd file or files (array) from given path, optionally define the target dir. Returns build Instance.\n\nExample:\n\n\tbuild.add('/path/to/file');\n\t// or\n\tbuild.add(['/path/to/file1', '/path/to/file2']);\n\n### Build#process(options)\nRun processors over files previously added to the build instance. Returns build Instance.\n\nDefaults are:\n\n    {\n        uglifyjs: true, // minify javascript using uglifyjs\n        cssvendor: true, // add css vendor prefixes like -webkit, -moz etc.\n        dataimage: true, // inline small images using data:image base64 encoded data for css and html\n        cssimport: true, // parse @import declarations and inline css files\n        cssabspath: true, // absolutize paths in css files (relative to the root)\n        htmlabspath: true, // absolutize paths in html files (relative to the root)\n        cssmin: true, // minify css using js port of yahoos compressor for css\n        jstransport: true, // wrap javascript code in commonjs transport proposal, can be used with requirejs later\n        texttransport: true // wrap any data into js transport string, f.e. to load html templates using requirejs from cdn\n    }\n\nYou can turn off any processor, add your own, or set any options for every processor.\n\nExample:\n\n\tbuild.process({\n\t\tuglifyjs: false,\n\t\tcssabspath: {\n\t\t\thost: 'http://localhost:8888',\n            verbose: true\n\t\t}\n\t})\n\nIf options is a function, it will be called for each file and act like a custom preprocessor.\n\nExample:\n\n\tbuild.process(function(path, data) {\n\t\t// `path` is path to the file\n\t\t// `data` is contents of the file\n\t\t// `this` is reference to build instance\n\t});\n\n### Build#combine(options)\nCombine all files of current build instance to one, of course without mixing css and js etc. Returns build Instance.\n\nExample:\n\n\tbuild.combine({\n\t\tjs: 'main.js',\n\t\tcss: 'main.css'\n\t});\n\n### Build#cleanup(dir)\nRemove all files and dirs from given dir. Returns build Instance.\n\nExample:\n\n\tbuild.cleanup('/path/to/dir');\n\n### Build.write(dir)\nWrite proccessed files to disk in passed dir. Returns build Instance.\n\nExample:\n\n\tbuild.write('/path/to/public/dir');\n\n### Build.end([message])\nWrite a success message to stdout, pass a message string optionally. Returns build Instance.\n\n### Example of complete build script:\n\n\tvar ams = require('ams');\n\n\tvar publ = __dirname + '/public',\n\t    src = __dirname + '/src',\n\t    host = 'http://localhost:8888';\n\n\tams.build\n\t\t// create a build for the dir\n\t    .create(src)\n\t    // find all files in it\n\t    .find()\n\t    // change processors options\n\t    .process({\n\t        cssabspath: {\n\t            host: host,\n                verbose: true\n\t        },\n\t        htmlabspath: {\n\t            host: host,\n                verbose: true\n\t        },\n\t        texttransport: false,\n            uglifyjs: {\n                verbose: true\n            }\n\t    })\n\t    // combine all js files\n\t    .combine({\n\t        js: 'main.js'\n\t    })\n\t    // write them to disk\n\t    .write(publ)\n\t    // stdout success message\n\t    .end();\n",
  "_id": "ams@0.0.21",
  "_from": "ams"
}
